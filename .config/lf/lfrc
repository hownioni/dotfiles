###!! BASIC SETTINGS !!###
set ifs "\n"
set shell bash
set shellopts '-eu'

# UI
#set hidden true
set icons true
set drawbox
set roundbox
set scrolloff 10
set truncatechar "â€¦"
set tabstop 4
set scrolloff 5
set wrapscroll
set period 1

# Search
set ignorecase true
set globsearch true
set globfilter true
set incsearch true
set findlen 0

# Previews
set previewer ~/.config/lf/previewer/preview
set cleaner ~/.config/lf/previewer/clean
map i $LESSOPEN='| ~/.config/lf/previewer/preview %s' less -R $f

# Remove some defaults
map m
map t
map "'"
map '"'
map w
map d
map r
map zh
#======

# Warning
&[ "$LF_LEVEL" -eq 1 ] || lf -remote "send $id echoerr \"Warning: You're in a nested lf instance!\""

###!! CUSTOM FUNCTIONS !!###
cmd on-select &{{
    lf -remote "send $id set statfmt $(printf '%s' "$(eza -ldg --color=always "$f")" | ~/.config/lf/scripts/lf-escape)"
}}

cmd eval &{{
    cmd="send $id"
    for arg; do
        cmd="$cmd $(eval "printf '%s' \"$arg\"" | ~/.config/lf/scripts/lf-escape)"
    done
    lf -remote "$cmd"
}}

### SEARCH ###
cmd fzf_jump ${{
    res="$(fd . -d 1 -H | fzf --reverse --header="Jump to location")"
    if [ -n "$res" ] ; then
        if [ -d "$res" ] ; then
            cmd="cd"
        else
            cmd="select"
        fi
        res="$(printf '%s' "$res" | ~/.config/lf/scripts/lf-escape)"
        lf -remote "send $id $cmd $res"
    fi
}}
map / :fzf_jump

cmd fzf_search ${{
    cmd="rg --column --line-number --no-heading --color=always --smart-case"
    fzf --ansi --disabled --layout=reverse --header="Search in files" --delimiter=: \
        --bind="start:reload([ -n {q} ] && $cmd -- {q} || true)" \
        --bind="change:reload([ -n {q} ] && $cmd -- {q} || true)" \
        --bind='enter:become(lf -remote "send $id select \"$(printf "%s" {1} | sed '\''s/\\/\\\\/g;s/"/\\"/g'\'')\"")' \
        --preview='~/.config/lf/previewer/clean; ~/.config/lf/previewer/preview {1} "$FZF_PREVIEW_COLUMNS" "$FZF_PREVIEW_LINES" "$FZF_PREVIEW_LEFT" "$FZF_PREVIEW_TOP"'
}}

map <c-f> :fzf_search
#---

### OPEN ###
#cmd open &~/.config/lf/lf_open "$f"
cmd open $set -f; rifle -p 0 "$fx"

#cmd open-with-gui &$@ $fx ## opens with a gui application outside lf client
#cmd open-with-cli $$@ $fx ## opens with a cli application inside lf client

cmd open-with ${{
    clear
    set -f
    rifle -l $fx | sed -e "s/:[a-Z]*:[a-Z]*:/ \| /"
    read -p "open with: " method
    rifle -p $method $fx
}}
#---

### MAKE STUFF ###
cmd mkdir %{{
    dir=""

    while [ -z "$dir" ];
    do
        printf "Directory Name: "
        read -r dir
    done

    if [ -d "$dir" ]; then
        lf -remote "send $id cd $(printf '%s' "$dir" | ~/.config/lf/scripts/lf-escape)"
    else
        mkdir -p -m 775 -- "$dir"
        lf -remote "send $id select $(printf '%s' "$dir" | ~/.config/lf/scripts/lf-escape)"
    fi
}}

cmd mkfile %{{
    mode="$1"
    file=""

    while [ -z "$file" ];
    do
        printf "File Name: "
        read -r file
    done

    if [ -e "$file" ]; then
        lf -remote "send $id \$\$EDITOR \"$file\""
    else
        case $mode in
            normal)
                touch "$file"
                lf -remote "send $id \$\$EDITOR \"$file\""
                ;;
            script)
                echo "#!/usr/bin/env bash" >> "$file"
                chmod +x "$file"
                lf -remote "send $id \$\$EDITOR \"$file\""
                ;;
        esac
    fi
}}

cmd chmod %{{
    mode="$1"
    printf "Mode Bits: "
    read -r bits

    case $mode in
        files)
            for file in $fx
            do
                chmod "$bits" "$file"
            done
            ;;
        dir-recurs)
            for dir in $fx
            do
                chmod -R "$bits" "$dir"
            done
            ;;
    esac
    lf -remote 'send reload'
}}
#---

### RENAME ### 
cmd bulk-rename ${{
    vimv -- $(basename -a -- $fx)
    lf -remote "send $id :load; unselect"
}}

map R bulk-rename

# Better Rename
map ri rename
map rI :rename; cmd-home
map rA :rename; cmd-end
map rc :rename; cmd-delete-home
map rC :rename; cmd-end; cmd-delete-home
#---

### COPY & PASTE COMMANDS ###

cmd paste &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy) cp -r --update=none -- "$@" .;;
        move)
            mv --update=none -- "$@" .
            lf -remote "send clear"
            ;;
    esac
}}

cmd paste-override &{{
    set -f
    mode=$(head -1 ~/.local/share/lf/files)
    list=$(sed 1d ~/.local/share/lf/files)
    set -- _ $list; shift
    [ $# -gt 0 ] || exit
    case $mode in
        copy)
            cp -r "$@" ./
            ;;
        move)
            rsync -r --remove-source-files "$@" ./
            lf -remote "send clear"
            ;;
    esac
    lf -remote 'save\nmove\n'
    lf -remote "send $id load"
    lf -remote "send $id echo \"\033[0;32mpasted $# file(s)\033[0m\""
}}

# Make links
# y (select for copy) and Pl to paste soft-link
# x (select for cut) and Pl to paste hard-link
cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echoerr no files to link"
        exit
    fi
    case "$mode" in
        # 'copy' mode indicates a symlink
        copy) ln -sr -t . -- "$@";;
        # while 'move' mode indicates a hard link
        move)
            ln -t . -- "$@"
            lf -remote "send clear"
            ;;
    esac
}}

cmd follow-link %{{
  lf -remote "send $id select $(printf '%s' "$(readlink -- "$f")" | ~/.config/lf/scripts/lf-escape)"
}}

# Copy directory names
cmd yank-file $printf '%s' "$f" | xclip -i -selection clipboard
cmd yank-paths $printf '%s' "$fx" | xclip -i -selection clipboard
cmd yank-dirname &printf '%s' "$PWD" | xclip -i -selection clipboard
cmd yank-basename &basename -a -- $fx | head -c-1 | xclip -i -selection clipboard
cmd yank-basename-without-extension &basename -a -- $fx | sed -E 's/\.[^.]+$//' | head -c-1 | xclip -i -selection clipboard

cmd select-buffer &{{
    set -- $(cat ~/.local/share/lf/files)
    shift
    if [ "$#" -eq 0 ]; then
        lf -remote "send $id echoerr select-buffer: no file in copy/cut buffer"
        exit
    fi
    files="$(printf '%s\n' "$@" $fs | sort -u | sed 's/\\/\\\\/g;s/"/\\"/g;s/^/"/;s/$/"/' | tr '\n' ' ')"
    lf -remote "send $id :unselect; toggle $files"
}}

# Dragon-drop
cmd dragon %dragon-drop -a -x $fx
cmd dragon-stay %dragon-drop -a $fx
cmd dragon-individual %dragon-drop $fx
cmd dlfile %dlfile
#---

### ARCHIVE BINDINGS ###
# extract the current file with the right command
cmd unarchive %{{
    set -f
    ouch decompress $fx
}}

cmd compress %{{
    set -f
    printf "Archive name: "
    read -r name
    if [[ -z "$name" && -d $f ]]; then
        name="$f"
    fi
    type="$1"

    case $type in
        tar) ext="tar";;
        tbz2) ext="tar.bz2";;
        tgz) ext="tar.gz";;
        txz) ext="tar.xz";;
        zip) ext="zip";;
        7z) ext="7z";;
    esac

    ouch compress $fx "${name}.${ext}"
}}
#---

### TRASH BINDINGS ###

cmd trash %trash-put -- $fx
cmd clear_trash !trash-empty
cmd restore_trash !trash-restore
cmd list_trash !trash-list
#---

### CD ###
# LFCD
cmd quit-and-cd &{{
    pwd > "$LF_CD_FILE"
    lf -remote "send $id quit"
}}

map Q quit-and-cd
#---

# zoxide
cmd z %{{
    result="$(printf '%s' "$(zoxide query --exclude $PWD $@)" | ~/.config/lf/scripts/lf-escape)"
    lf -remote "send $id cd $result"
}}

cmd zi ${{
    result="$(printf '%s' "$(zoxide query -i)" | ~/.config/lf/scripts/lf-escape)"
    lf -remote "send $id cd $result"
}}

cmd on-cd &{{
    zoxide add "$PWD"
    printf '\033]0;lf - %s\007' "$PWD" > /dev/tty
}}

on-cd
#---
#======

###!! BINDINGS !!###
# Basic Functions
map . set hidden!
map p paste
map x cut
map DD delete
map mf mkfile normal
map ms mkfile script
map md mkdir
map mx. chmod files
map mxr chmod dir-recurs
map bgd $cutebg $f
map bgl $cutebg -l $f
#map O push :open-with-gui<space> ## input application
#map o push :open-with-cli<space> ## input application
map o open-with
map <enter> open
map <delete> delete
map zi zi

# Archive mappings
map au unarchive
map at compress tar
map ag compress tgz
map ab compress tbz2
map ax compress txz
map az compress zip
map a7 compress 7z

# Trash Mappings
map dd trash
map tr restore_trash
map tc clear_trash
map tl list_trash

# Copy and paste
map Po paste-override
map Pl :link
map Yf yank-file
map Yp yank-paths
map bf select-buffer

# Dragon mapping
map dr dragon
map ds dragon-stay
map di dragon-individual
map dl dlfile

### MOVEMENT ###
# User directories
map gd cd ~/Downloads
map gD. cd ~/Documents
map gDi cd ~/Documents/IRL
map gDe cd ~/Documents/IRL/Escuela
map gDp cd ~/Documents/PDF
map gp. cd ~/Pictures
map gpw cd ~/Pictures/Wallpapers/
map gv cd ~/Videos
map gm cd ~/Music
map gM cd /data
map gl cd ~/.local
map gu eval cd "/run/media/$USER"
map gG cd ~/Games

# Coding
map C cd ~/.config/lf/
map gc cd ~/.config
map gC cd ~/codino
map gr cd ~/repos
map g. cd ~/.dotfiles
map gs cd ~/.local/bin

# Root directories
map gR. cd /
map gRu cd /usr
map gRs cd /usr/share
map gRe cd /etc

map gL follow-link
map gt. cd ~/.local/share/Trash/files
map gtd cd /data/.Trash-1000/files

map J :updir; set dironly true; down; set dironly false; open
map K :updir; set dironly true; up; set dironly false; open
#---
#======
