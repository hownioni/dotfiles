#!/usr/bin/env bash

shopt -s nullglob

exists() { hash "$@" &>/dev/null; }
require() {
	for dep in "$@"; do
		exists "$dep" || die "Dependency ${dep} is missing. Install it." 127
	done
}

main() {
	require wal feh dunst qtile

	get_args "${@}"

	[[ -z "$img_file" ]] && interactive

	[[ -z "$img_file" ]] && usage && die "Expected input" 1

	[[ ! -f "$img_file" && ! -d "$img_file" ]] && die "File doesn't exist owo" 1

	[[ -d "$img_file" ]] || ! identify "$img_file" &>/dev/null && die "$img_file is not an image >w<" 1

	if exists pywal-spicetify; then
		color_ini_dir="${HOME}/.config/spicetify/Themes/${spice_theme:-text}"
		[[ ! -d "$color_ini_dir" ]] && die "Theme ${spice_theme} doesn't exist." 1
		color_ini="$color_ini_dir/color.ini"
		[[ ! -f $color_ini ]] && printf "; This file was generated by cutebg" >>"$color_ini"
		pywal-spicetify text &>/dev/null
	fi
	wal --cols16 "${colortheme:-darken}" -i "$img_file"
	feh --bg-fill "$img_file" &>/dev/null
	[[ ! -d "${HOME}/.config/dunst" ]] && mkdir "${HOME}/.config/dunst"
	[[ ! -L "${HOME}/.config/dunst/dunstrc" ]] && ln -s "${HOME}/.cache/wal/dunstrc" "${HOME}/.config/dunst/dunstrc"
	pkill dunst
	#exists kvantummanager && apply-theme -s &>/dev/null
	#exists oomox-cli && oomox-cli -o pywal "${HOME}/.cache/wal/colors-oomox" -t "$HOME/.local/share/themes" &>/dev/null
	exists pywal-discord && pywal-discord -p "${HOME}/.config/vesktop/themes/" -t default &>/dev/null
	exists walcord && walcord
	qtile cmd-obj -o cmd -f reload_config
}

usage() {
	cat <<HELP_MSG
    Usage: ${0##*/} [options] image

    Options:
        -h, --help
            Print this message
        -l, --lighten
            Change the method used for generating the 16 colors
        -t, --spice-theme
            Choose the spicetify theme name where the colorscheme will be saved
        -d, --directory
            Directory where wallpapers reside
HELP_MSG
}

die() {
	printf "%s\n" "$1"
	exit "$2"
}

get_args() {
	pos_args=()

	while (("$#")); do
		local arg=$1
		local val=$2

		case "$arg" in
			-h | --help)
				usage && exit 0
				;;
			-l | --lighten)
				colortheme="lighten"
				shift
				;;
			-t | --spice-theme)
				if [[ -n "$val" ]] && [[ "${val:0:1}" != "-" ]]; then
					spice_theme=$val
					shift 2
				else
					die "Option $arg requires an argument." 1
				fi
				;;
			-d | --directory)
				if [ "$val" != "" ] && [ "${val:0:1}" != "-" ]; then
					wal_dir=$val
					shift 2
				else
					die "Option $arg requires an argument." 1
				fi
				;;
			-*)
				die "Invalid option: $arg" 1
				;;
			*)
				pos_args+=("$arg")
				shift
				;;
		esac
	done

	set -- "${pos_args[@]}"

	img_file=$1
}

interactive() {
	require rofi magick

	wal_dir=${wal_dir:-$HOME/Pictures/Wallpapers}
	cache_dir="${HOME}/.cache/cutebg"
	monitor_res=$(($(xdpyinfo | awk '/dimensions/{print $2}' | cut -d 'x' -f1) * \
	14 / $(xdpyinfo | awk '/resolution/{print $2}' | cut -d 'x' -f1)))
	rofi_override="element-icon{size:${monitor_res}px;}"
	rofi_theme="$HOME/.config/rofi/themes/cutebg.rasi"

	rofi_cmd() {
		rofi -dmenu -i -show-icons -p "ï€¾  Select Wallpaper: " \
			-theme "$rofi_theme" -theme-str "$rofi_override"
	}

	magick_cmd() {
		img_path="$1"
		img_filename="$2"

		cache_file="${cache_dir}/${img_filename}"
		if [[ ! -f "$cache_file" ]]; then
			magick "$img_path" -strip -thumbnail 500x500^ -gravity center \
				-extent 500x500 "$cache_file"
		fi
	}

	[[ ! -d "$cache_dir" ]] && mkdir -p "$cache_dir"

	wals=()
	for entry in "$wal_dir"/*; do
		if [[ -d "$entry" ]]; then
			group="${entry##*/}"
			[[ ! -d "${cache_dir}/${group}" ]] \
				&& mkdir -p "${cache_dir}/${group}"
			for file in "$entry"/*; do
				img="${group}/${file##*/}"
				wals+=("$img")
				magick_cmd "$file" "$img"
			done
		else
			img="${entry##*/}"
			wals+=("$img")
			magick_cmd "$entry" "$img"
		fi
	done

	img_file="${wal_dir}/$(
		for image in "${wals[@]}"; do
			printf "%s\x00icon\x1f%s\n" "$image" "${cache_dir}/${image}"
		done | rofi_cmd
	)"
}

main "${@}"
